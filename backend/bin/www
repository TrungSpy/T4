#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var Heap = require('heap');
var array = require("array-extended");
var request = require('request');

var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}


var io = require('socket.io')(server);
var current_room = "";
io.on('connection', function(socket) {
    socket.on('enter_room', function(room) {
        var rooms = socket.rooms;
        for (i = 0; i < rooms.length; i++)
            socket.leave(rooms[i])
        socket.join(room);
        current_room = room;
        socket.emit("enter_room_finished", "");
    });

    socket.on('topic', function(question) {
        if (!question.trim()) return;
        request_topic(question, function(g) {
            search_groups(g, function(result) {
                socket.emit("rooms", JSON.stringify(result));
            });
        });
    });

    socket.on('hello', function(msg) {
        socket.broadcast.to(current_room).emit('hello', msg);
    });
});

function search_groups(group, func) {
    MongoClient.connect("mongodb://localhost:27017/sbcloud", function(err, db) {
        if (err) console.log('database connection error');
        var groups = db.collection('groups');

        groups.findOne({tags: group}, function(err, g) {
            groups.find({}, {_id: 0}).toArray(function(err, g_all) {
                if (!g) groups.insert({"tags": group})
                db.close();
                g_all = g_all.map(function(u) {return u.tags;})
                tops = topgroups(group, g_all);
                result = []
                for (i = 0; i < tops.length; i++) {
                    var count = io.sockets.adapter.rooms[tops[i]];
                    count = count ? count.length : 0;
                    result.push({"name": tops[i], "count": count})
                }
                func(result);
            });

        });
    });
}

function topgroups(g, groups) {
    var arr = [];
    for (i = 0; i < groups.length; i++) {
        var sim = array(groups[i]).intersect(g).value().length / array(groups[i]).union(g).value().length;
        arr.push({"group": groups[i], "sim": sim});
    }

    var heap = new Heap(function(a, b) {
        return a.sim - b.sim;
    });

    for (i = 0; i < arr.length; i++) {
        if (heap.size() < 4)
            heap.push(arr[i]);
        else if (heap.top()["sim"] < arr[i]["sim"])
            heap.replace(arr[i]);
    }
    tops = array.sort(heap.toArray(), "sim").reverse();
    groups = []
    for (i = 0; i < tops.length; i++)
        groups.push(tops[i]["group"].join(" > "))

    return groups;
}

function request_topic(s, func) {
    var headers = {
        'Content-type': 'application/json',
        'Accept': 'application/json'
    }

    var options = {
        url: 'http://prophet.100intl.co.jp:8000/queries.json',
        method: 'POST',
        headers: headers,
        json: {"text": "Where can I buy a cheap TOTO toilet seat in Osaka?"},
    };

    var req = request(options, function(err, res, body) {
        if (!err && res.statusCode == 200) {
            // Print out the response body
            func(body.category.split("."));
        }
    });
}