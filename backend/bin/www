#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var Heap = require('heap');
var array = require("array-extended");

var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var io = require('socket.io')(server);

io.on('connection', function(socket) {

  socket.on('enter_room', function(room) {
    var rooms = socket.rooms;
    for(i = 0; i < rooms.length; i++)
      socket.leave(rooms[i])
    socket.join(room);

    io.emit("enter_room_finished", "");
  });

  //socket.on('topic', function(s) {
  //  search_groups(["tokyo"])
  //});

  socket.on('hello', function(msg) {
    var room_id = Object.keys(socket.rooms)[0];
    socket.broadcast.to(room_id).emit('hello', msg);
  });

  socket.on("topic", function(question) {
    groups = [{'name':"room1", 'count':1},{"name":"room2", "count":2}, {"name":"room3", "count":10}];
    socket.emit("rooms", JSON.stringify(groups));
  });
});

function search_groups(group) {
  MongoClient.connect("mongodb://localhost:27017/sbcloud", function(err, db) {
    if (err) console.log('database connection error');
    var groups = db.collection('groups');

    groups.findOne({tags:group}, function(err, g) {
      groups.find({}, {_id:0}).toArray(function(err, g_all) {
        if (!g) groups.insert({"tags":group})
        db.close();
        g_all = g_all.map(function(u) { return u.tags })
        tops = topgroups(group, g_all)
        result = []
        for (i = 0; i < tops.length; i++) {
          var count = io.sockets.adapter.rooms[tops[i]];
          if (!count) count = 0;
          result.push({"name": tops[i], "count": count})
        }
        io.emit("rooms", JSON.stringify(result));
      });

    });
  });
}

function topgroups(g, groups) {
  var arr = [];
  for (i = 0; i < groups.length; i++) {
    var sim = array(groups[i]).intersect(g).value().length / array(groups[i]).union(g).value().length;
    arr.push({"group":groups[i], "sim":sim});
  }

  var heap = new Heap(function(a, b) {
      return a.sim - b.sim;
  });

  for (i = 0; i < arr.length; i++) {
    if (heap.size() < 4)
      heap.push(arr[i]);
    else if (heap.top()["sim"] < arr[i]["sim"])
      heap.replace(arr[i]);
  }
  tops = array.sort(heap.toArray(), "sim").reverse();
  groups = []
  for (i = 0; i < tops.length; i++)
    groups.push(tops[i]["group"].join("."))

  return groups;
}
